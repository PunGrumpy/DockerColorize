name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published, created]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go 1.20
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Lint
        uses: golangci/golangci-lint-action@v2

      - name: Build
        run: make build

      - name: Coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic -tags test ./...

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: bin/*

  publish:
    needs: build
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: bin/

      - name: Check File Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            constgo:
              - 'internal/app/const.go'

      - name: Check If Version Updated
        if: steps.changes.outputs.constgo == 'true'
        run: |
          VER_FILE=.version
          OLD_VER=$(cat $VER_FILE)
          NEW_VER=$(awk -F\" '/Ver/ {print $2}' internal/app/const.go)

          if [[ $OLD_VER != $NEW_VER ]]; then
            echo "Version updated from $OLD_VER to $NEW_VER"
            echo $NEW_VER > $VER_FILE
            git config user.name "Automated"
            git config user.email "actions@users.noreply.github.com"
            git add $VER_FILE
            git commit -m "🤜🏻 Bump version to $NEW_VER"
            git push
          else
            echo "Version has not been updated"
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: steps.check-version.outputs.new-version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check-version.outputs.new-version }}
          name: ${{ steps.check-version.outputs.new-version }}
          draft: false
          prerelease: false
          files: |
            bin/*

  publish_homebrew:
    needs: publish
    name: Publish Homebrew
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go 1.20
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Get Version
        id: get-version
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Go Releaser
        if: steps.get-version.outputs.version != ''
        uses: goreleaser/goreleaser-action@v4
        with:
          version: ${{ steps.get-version.outputs.version }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
